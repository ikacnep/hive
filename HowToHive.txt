Единственный метод, о котором надо знать - GamesManipulator.Act(). Описан в from GamesManipulator import GamesManipulator :)
Все описание ниже валидно и для не-Json подхода. Но надо руками вызывать соответствуюшие методы из манипуляирпа.

Он ест единственный параметр - hash action, в котором описано все, что ты хочешь получить от этого метода. В результате он так же выдает хэш.
Ниже будет список возможных действий, какие они требуют параметры и что возвращают. Нотация следующая:
все, что в { } (фигурных скобках) - хэши. В виде { <ключ>: <значение> }, с разделителем - запятая
все, что в [] (квадратных скобках) - массивы. Значения так же, через запятую
все, что в () (круглых скобках) - туплы. Могут быть заменены на массивы без потери сути
все, что после # - комментарий к текущей строке.
Если перед ключом/значением написан ? - значит, данный ключ/значение опциональны. Описание в комментарии рядом же

Начнем.

action всегда выглядит следующим образом:
{
	"action": <что делать> # что делать - элемент enum-а Game.Utils.Action. Где-то ниже приведен код этого енума на момент написания этой инструкции
	?<parameter> : <value> # много их и разных, о них дальше пойдет речь.
}

возвращаемое значение всегда выглядит следующим образом:
{
	"action" : {....}				# Тот самый action, который был получен на вход
}

В случае какой-либо ошибки вылетит исключение.

стандартное возвращаемое значение для игровых действий, когда все ок (оно будет часто встречаться ниже):
{
	"gid" : int, 				# ID игры
	"nextPlayer" : int, 		# ID следующего игрока
	"turn" : int, 				# номер хода
	"ended" : boolean			# закончилась ли игра
	"lost" :{
		<player1 id> : boolean,	# True, если первый игрок проиграл
		<player2 id> : boolean	# True, если второй игрок проиграл
	} 							# При ничьей - оба игрока считаются проигравшими
	?"fid" : id, 				# При Move и Place - ID фигуры, с которой произошло изменение. Если действовала Мокрица - тут будет ID перемещенной фигуры
	?"state" : <state>			# Состояние игры. Добавляется, если в action был ключ "addState", со значением True
	?"actions" : <turns>		# Возможные ходы. Добавляется, если в action был ключ "addActions", со значением True
	?"rateChange" : {			# Присутствует только если "ended" = True
		<playerid> : int 		# Для каждого игрока - его изменение рейтинга Elo
	}
}

тип <state>. Это описание текущего состояния игры:
{
	"figures" : {
		<playerid> : {				# Для каждого ID игрока - участника
			<figureid> : {				# Для каждого ID фигуры, принадлежащего этому игроку
				"type" : FigureType, 		# Тип фигуры
				"position" : (int, int),	# Позиция фигуры
				"layer" : int, 				# Слой фигуры. Нулевой - самый верх, чем больше цифра, тем ниже
				"id"	: int 				# ID фигуры
			}
		}
	},
	"turn" : int, 				# номер хода
	"lastAction" : action, 		# последнее успешно сделанное в игре действие
	"ended" : boolean,			# True, если игра закончилась
	"lost" : {	
		<playerid> : boolean		# Для каждого игрока - True, если он проиграл
	},
	"nextPlayer" : int, 		# ID игрока, который ходит следующим
	?"allActions" : [action]	# Все успешные игровые действия за время партии. Прям как были. Добавляется, если в action был ключ "addAllActions", со значением True
}

тип <turns>. Это описание возможных ходов:
{
	"placements" : {					# Допустимые добавления фигур
		<playerid> : {						# Для каждого ID игрока - участника
			"figures" : [FigureType],			# Дедублицированный список фигур, которые можно поставить
			"places" : [(int, int)]				# Список мест, куда можно поставить фигуры
		}
	},
	"turns" : {							# Допустимые перемещения
		<playerid> : {						# Для каждого ID игрока - участника
			<figureid> : [						# Для каждого ID фигуры
				(int, int),							# Все возможные перемещения самой фигуры указываются как пары координат - куда можно переместить
				((int, int), (int, int))			# Все возможные перемещения других фигур, связанные с этой (Мокрица двигает других) - пара наборов координат. Откуда перемещаем, куда
			]
		}
	},
	"skips" : {							# Допустимые пропуски ходов
		<playerid> : boolean				# Для каждого игрока - может ли он пропустить ход. True, если может
	},
	"nextPlayer" : int 					# Игрок, который ходит следующим
}

Какие есть действия:
	0) Undefined. Хочешь увидеть ошибку - твой выбор :)
		{
			"action" : Action.Undefined
		}
# Далее идет набор игровых действий
	1) Place. Ставит фигуру на поле в некоторой игре от некоторого игрока
		{
			"action" : Action.Place,
			"gid" : int, 				# ID игры
			"player" : int,				# ID игрока, который ходит
			"figure" : FigureType,		# тип фигуры, который хотим выставить
			"position" : (int, int),		# координаты, куда ставим. x, y
			?"addActions" : boolean, 	# см выше
			?"addState" : boolean,		# см выше
			?"addAllActions" : boolean	# см выше
		}
		Возвращаемое значение - стандартное для "Игровых действий"
	2) Move. Перемещает фигуру на поле в некоторой игре от некоторого игрока
		{
			"action" : Action.Move,
			"gid" : int, 				# ID игры
			"player" : int,				# ID игрока, который ходит
			"fid" : int,				# ID фигуры, инициирующей действие
			"from" : (int, int),		# координаты, откуда перемещаем
			"to" : (int, int),			# координаты, куда перемещаем	
			?"addActions" : boolean 	# см выше
			?"addState" : boolean		# см выше
			?"addAllActions" : boolean	# см выше
		}
		Возвращаемое значение - стандартное для "Игровых действий"
	3) Skip. Пропускает ход
		{
			"action" : Action.Skip,
			"gid" : int, 				# ID игры
			"player" : int,				# ID игрока, который ходит
			?"addActions" : boolean 	# см выше
			?"addState" : boolean		# см выше
			?"addAllActions" : boolean	# см выше
		}
		Возвращаемое значение - стандартное для "Игровых действий"
	4) Concede. Сдаться
		{
			"action" : Action.Skip,
			"gid" : int, 				# ID игры
			"player" : int,				# ID игрока, который сдается. Важно: сдаться игрок может даже не в свой ход
			?"addActions" : boolean 	# см выше
			?"addState" : boolean		# см выше
			?"addAllActions" : boolean	# см выше
		}
		Возвращаемое значение - стандартное для "Игровых действий"
	5) Suggest. Предложить ничью
		{
			"action" : Action.Skip,
			"gid" : int, 				# ID игры
			"player" : int,				# ID игрока, который предлагает. Важно: предложить ничью игрок может даже не в свой ход. Чтобы ничья была засчитана - надо, чтобы оба игрока предложили ничью, не делая никаких других игровых действий между этими событиями
			?"addActions" : boolean, 	# см выше
			?"addState" : boolean,		# см выше
			?"addAllActions" : boolean	# см выше
		}
		Возвращаемое значение - стандартное для "Игровых действий"
	6) ForceEnd. Досрочно завершить партию.
		Полный эквивалент Concede
# Далее идут НЕ-игровые действия
	7) CreateGame. Создать игру
		{
			"action" : Action.CreateGame,
			"player1" : int, 				# ID первого игрока
			"player2" : int, 				# ID второго игрока
			?"turn" : int, 					# ID игрока, который ходит первым. Если не указано - будет выбран случайный
			?"mosquito" : boolean,			# Использовать ли Москита. Дефолтно False
			?"ladybug" : boolean,			# Использовать ли Божью Коровку. Дефолтно False
			?"pillbug" : boolean,			# Использовать ли Мокрицу. Дефолтно False
			?"tourney" : boolean			# Использовать ли турнирные правила. Дефолтно False
			?"addActions" : boolean, 		# см выше
			?"addState" : boolean,			# см выше
			?"addAllActions" : boolean		# см выше
		}
		Возвращаемое значение, если все ок:
		{
			"gid" : int, 		# ID игры
			"player1" : int,
			"player2" : int,
			?"state" : <state>
			?"actions" : <turns>
		}
	8) GetGames. Найти игры
		{
			"action" : Action.GetGames,		# Если это единственный параметр - вернет инфу по всем, идущим сейчас играм
			?"gid" : int,					# Сужает область поиска - находит только игру с заданным ID
			?"players" : [int],				# Сужает область поиска - находит игры с указанными участниками. Всеми указанными одновременно. Т.е. если указан 1 ID, то все игры, где был этот игрок. Если 2 ID - где эти игрока играли друг с другом. Если 3 ID - то 3-е число будет проигнорировано
			?"archived" : boolean			# Расширяет область поиска - добавляет игры, которые уже завершились. Дефолтно False
		}
		Возвращаемое значение, если все ок и хоть что-то найдено:
		{
			"games" : [
				<game>,			# Игры, которые еще идут содержат меньше инфы
				?<archive>		# Игры, которые уже закончились имеют больше инфы, но дефолтно не ищутся
			]
		}
		где <game>:
			{
				"player1" : int,		# Игрок, который ходит первым
				"player2" : int,		# Игрок, который ходит вторым
				"gid" : int,			# ID игры
				"start" : datetime,		# Время начала партии
				"hasEnded" : False		# Игра не закончилась. Это способ отличить архивные от текущих
			}
		<archive>:
			{
				"player1" : int,
				"player2" : int,
				"gid" : int,
				"start" : datetime,
				"hasEnded" : True,		# Выше не требуют пояснений. Тут способ отличить архивные от текущих
				"length" : int,			# Количество ходов в партии
				"result1" : int,		# Изменение рейтинга Elo первого игрока
				"result2" : int,		# Изменение рейтинга Elo второго игрока
				"end" : datetime		# Время конца партии
			}
	9) GetPlayer. Найти игрока по его данным
		{
			"action" : Action.GetPlayer,
			?"token" : string,			# Token игрока. Позволяет не помнить логины-пароли :)
			?"login" : string,			# Логин игрока. Используется в паре с паролем. При указании логина и нахождении его в базе - "result" : False (Лёнь, шта?)
			?"password" : string,		# Пароль игрока. Используется в паре с логином. Секьюрности ради, хочу отметить, что можно пересылать тот же MD5 от пароля
			?"telegramId" : int 		# ID игрока через телеграм. При указании ID и нахождении его в базе - "result" : False (Лёнь, шта?)
			?"refreshToken" : boolean	# Требуется ли сменить токен игрока. Дефолтно False
		}
		Возвращаемое значение:
		{
			"player" : {
				"name" : string,			# Имя игрока
				"creationDate" : datetime,	# Дата создания записи
				"lastGame" : datetime,		# Дата окончания последней игры (последней законченной, хочу заметить)
				"token" : string,			# Токен, для упрощения логина
				"rating" : int,				# Рейтинг Elo игрока
				"premium" : boolean,		# Является ли игрок премиумным
				"id" : int 					# ID игрока
			}
		}
	10) CreatePlayer. Создает запись, соответсвтующую игроку.
		{
			"action" : Action.CreatePlayer,
			?"name" : string,				# Имя игрока. Может быть не уникальным (!). Дефолтно None
			?"login" : string,				# Login. используется в паре с паролем. Должен быть указан или логин-пароль, или ID в телеграмме для создания игрока
			?"password" : string,			# Пароль, или то, во что он превратился - используется в паре с логином.
			?"telegramId" : int,			# ID в телеграме. Может использоваться вместо логина и пароля
			?"premium" : boolean			# Является ли игрок премиумным (хз, что это значит, но дефолтно False :) )
		}
		Возвращаемое значение:
		{
			"player" : {
				"name" : string,			# Имя игрока
				"creationDate" : datetime,	# Дата создания записи
				"lastGame" : None,			# Дата окончания последней игры (последней законченной, хочу заметить)
				"token" : string,			# Токен, для упрощения логина
				"rating" : 1000,			# Рейтинг Elo игрока. При создании = 1000
				"premium" : boolean,		# Является ли игрок премиумным
				"id" : int 					# ID игрока
			}
		}
	11) ModifyPlayer. Модифицирует запись, соответствующую игроку
		{
			"action" : Action.ModifyPlayer,
			?"token" : string,			# Используется для поиска игрока. См GetPlayer
			?"login" : string,			# Используется для поиска игрока. См GetPlayer
			?"password" : string,		# Используется для поиска игрока. См GetPlayer
			?"telegramId" : int 		# Используется для поиска игрока. См GetPlayer
			?"refreshToken" : boolean	# Используется для поиска игрока. См GetPlayer
			"newValues" : {
				?"name" : string,			# Новое имя игрока
				?"login" : string,			# Новый логин игрока
				?"password" : string,		# Новый пароль игрока
				?"telegramId" : int 		# Новый ID телеграма игрока
			}
		}
		Возвращаемое значение:
		{
			"player" : {
				"name" : string,			# Имя игрока
				"creationDate" : datetime,	# Дата создания записи
				"lastGame" : datetime,		# Дата окончания последней игры (последней законченной, хочу заметить)
				"token" : string,			# Токен, для упрощения логина
				"rating" : int,				# Рейтинг Elo игрока
				"premium" : boolean,		# Является ли игрок премиумным
				"id" : int 					# ID игрока
			}
		}

		
используемые перечисления:

class Action(IntEnum):
    Undefined = 0
    Place = 1
    Move = 2
    Skip = 3
    Concede = 4
    Suggest = 5
    ForceEnd = 6
    CreateGame = 7
    GetGames = 8
    GetPlayer = 9
    CreatePlayer = 10
    ModifyPlayer = 11

class FigureType(IntEnum):
    Undefined = 0
    Queen = 1
    Spider = 2
    Beetle = 3
    Grasshopper = 4
    Ant = 5
    Mosquito = 6
    Ladybug = 7
    Pillbug = 8
