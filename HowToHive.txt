Так. Допилил почти норм.
Есть класс: Game.GameInstance
при создани ест 3 параметра:
1) ID 1 игрока
2) ID 2 игрока
3) Game.Settings.GameSettings класс.

Класс GameSettings очень простой. Создается через GameSettings.GetSettings метод. Там параметры все опциональные и довольно очевидные (использовать ли москита, божью коровку, пиллбага, турнирные правила).

Как работать с GameInstance. Он имеет методы, каждый из которых возвращает hash:
1) GetState. параметр addAllActions - Дефолтно False. Если True - добавит историю ходов под "allActions" ключом (массив приходивших действий). Ключи:
	"figures" - хэш. 
		Ключи - ID игроков. Содержимое - хэши, 
			ключи - ID фигур. Содержимое - хэши. 
				Ключи: 
					"type" - тип фигуры (Game.Settings.Figures.FigureTypes.FigureType), 
					"position" (x, y), 
					"layer" - уровень по высоте (нулевой - на самом верху. Больше цифра - ниже), 
					"id" - таки ID
	"turn" - число - номер хода
	"lastAction" - последнее действие (ровно как пришло)
	"ended" - boolean, закончилась ли игра
	"lost" - хэш. 
		Ключ - ID игрока, значения - boolean. True если игрок с этим ID проиграл. Могут проиграть оба (ничья)
	"nextPlayer" - id следующего игрока, который ходит
	"allActions" - опционально, см выше

2) GetActions. Без параметров. Ключи:
	"placements" - хэш, 
		ключи - ID игроков. Содержимое - хэши. Ключи:
			"figures" - дедуплицированный список фигур
			"places" - места, в которые можно поставить
	"turns" - хэщ.	
		Ключи - ID игроков. Содержимое - хэши.
			Ключи - ID фигур. Содержимое - два варианта:
				1) tuple координат: (x ,y) - то, куда можно передвинуть фигуру
				2) tuple из пар координат ((x1, y1), (x2, y2)) - координата
	"skips" - традиционо, хэш
		Ключи - ID игроков. Содержимое - boolean, может ли пропустить ход
	"nextPlayer" - id игрока, который ходит следующим
3) Act. Собственно, сделать что-нибудь.
	Обязательный параметр - action. Хэш, описывающий, что таки делать. См ниже
	Опциональные addState (дефолтно False) и addActions (дефолтно True). Добавляет к возврату, соответственно выдачу метода GetState и метода GetActions
	Ключи входного actio:
		"player" - ID игрока
		"action" - значение из enum-а Game.Utils.Action.Action
			Undefined = 0 - всегда выдает ошибку
		    Place = 1 - разместить фигуру. Нужны ключи (в том же action):
		    	"figure" - значение из enum-а Game.Settings.Figures.FigureTypes.FigureType - что ставим
		    	"position" - место, куда ставим
		    Move = 2 - подвинуть фигуру. Нужны ключи (в том же action):
		    	"fid" - ID фигуры
		    	"from" - откуда двигаем
		    	"to" - куда двигаем
		    Skip = 3 - пропустить ход. Ничего не требует
		    Concede = 4 - сдаться. Ничего не требует
		    Suggest = 5 - предложить ничью (не является ходом). Ничего не требует
		    ForceEnd = 6 - насильно закончить партию. Ничего не требует, эквивалентно Concede
	Результат - хэш. Ключи:
		"action" - входной параметр. Что пытались сделать )
		"result" - boolean. Говорит о том, корректно ли прошел ход
		"reason" - указан, если "result" == False. Содержит тип полученного Exception
		"message" - указан, если "result" == False. Содержит сообщение из полученного Exception
		Все параметры ниже - если "result" == True
		"nextPlayer" - ID игрока, который следующим ходит
		"turn" - номер хода
		"ended" - boolean, закончилась ли игра
		"lost" - хэш, ключи - ID игроков. значения - boolean - проиграл ли этот игрок
		"fid" - если Action был "Move" или "Place" - ID фигуры, с которой произошло действие
		"state" - опционально, результат работы GetState(False). Добавляется  при addState == True
		"actions" - опционально, результат работы GetActions(). Добавляется при addActions == True (дефолтно добавляется)
